name: Security Scan Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * 1'  # Weekly scan on Mondays

env:
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.5.7'

jobs:
  # CodeQL SAST for Python
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

  # Terraform Security Scan
  tfsec:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        soft_fail: false
        
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  # Dependency Vulnerability Scan
  snyk:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r whisper-mowd/requirements.txt
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=whisper-mowd/requirements.txt

  # Secret Scanning
  trufflehog:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@v3.82.1
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # OPA Policy Tests
  opa-test:
    name: OPA Policy Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: 0.57.0
        
    - name: Run OPA tests
      run: |
        opa test policies/*.rego -v
        
    - name: Evaluate critical policies
      run: |
        # Test encryption policy
        opa eval -d policies/security.rego -i terraform/environments/prod/terraform.tfplan.json "data.terraform.deny[x]"
        
        # Fail if critical issues found
        VIOLATIONS=$(opa eval -d policies/security.rego -i terraform/environments/prod/terraform.tfplan.json "data.terraform.deny[x]" | jq '.result[0].expressions[0].value | length')
        if [ "$VIOLATIONS" -gt 0 ]; then
          echo "Critical security violations found!"
          exit 1
        fi

  # Docker Image Scanning
  trivy:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t mowd-whisper:${{ github.sha }} -f Dockerfile .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: mowd-whisper:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-licenses
      run: pip install pip-licenses
      
    - name: Check licenses
      run: |
        pip-licenses --from=mixed --format=json --output-file=licenses.json
        
        # Check for prohibited licenses
        PROHIBITED_LICENSES=("GPL" "AGPL" "LGPL" "SSPL")
        for license in "${PROHIBITED_LICENSES[@]}"; do
          if grep -qi "$license" licenses.json; then
            echo "Found prohibited license: $license"
            cat licenses.json | jq '.[] | select(.License | contains("'$license'"))'
            exit 1
          fi
        done

  # Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, tfsec, snyk, trufflehog, opa-test]
    if: always()
    
    steps:
    - name: Generate report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- CodeQL: ${{ needs.codeql.result }}" >> security-report.md
        echo "- Terraform Security: ${{ needs.tfsec.result }}" >> security-report.md
        echo "- Dependency Scan: ${{ needs.snyk.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.trufflehog.result }}" >> security-report.md
        echo "- Policy Tests: ${{ needs.opa-test.result }}" >> security-report.md
        
    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
          
    - name: Fail if any critical issues
      if: |
        needs.codeql.result == 'failure' ||
        needs.tfsec.result == 'failure' ||
        needs.snyk.result == 'failure' ||
        needs.trufflehog.result == 'failure' ||
        needs.opa-test.result == 'failure'
      run: |
        echo "Critical security issues found!"
        exit 1